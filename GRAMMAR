// Identifiers
Letter ::= Lowercase | Uppercase
Lowercase ::= 'a'...'z'
Uppercase ::= 'A'...'Z'
Digit ::= '0'...'9'

Identifier ::= (Letter | '_') (Letter | Digit | '_')*
IdentList ::= (Identifier [','])+

ExtendedIdent ::= Identifier | <keyword>
QualifiedIdent ::= Identifier ('.' ExtendedIdent)*

// Operations
AddOp ::= '+' | '-' | 'or' | 'xor'
MulOp ::= '*' | '/' | 'div' | 'mod' | 'and' | 'shl' | 'shr'
RelOp ::= '=' | '>' | '<' | '<=' | '>=' | '<>'
UnaryOp ::= 'not' | '+' | '-'

// Expressions
Particle ::= (Digit)* | <stringliteral> | Identifier | ParenthesizedExpression
Atom ::= Particle ('.' ExtendedIdent | '[' ExpressionList ']' )*

Factor ::= Atom | UnaryOp Factor
Term ::= Factor (MulOp Factor)*

SimpleExpression ::= Term (AddOp Term)*

Expression ::= SimpleExpression (RelOp SimpleExpression)*
ExpressionList ::= (Expression [','])+

ParenthesizedExpression := '(' Expression ')'

Assignment ::= QualifiedIdent ':=' Expression

// Structure
Program ::= (DeclSection)* Block
MainProgram ::= Program '.'
SubProgram ::= Program ';'

Statement ::= Expression | Assignment | Block | IfStatement | CaseStatement | WhileStatement | ForStatement
StatementList ::= ([Statement] [';'])+
Block ::= 'begin' [StatementList] 'end'

IfStatement ::= 'if' Expression 'then' [Statement] ['else' [Statement]]

CaseSelector ::= (Range [','])+ ':' [Statement] [';']
CaseStatement ::= 'case' Expression 'of' (CaseSelector)+ ['else' [StatementList]] 'end'

WhileStatement ::= 'while' Expression 'do' [Statement]

ForStatement ::= 'for' Identifier ':=' Expression ('to' | 'downto') Expression 'do' [Statement]

// Types
Range ::= SimpleExpression ['..' SimpleExpression]
SimpleType ::= ExtendedIdent
ReturnOrParamType ::= SimpleType | ArrayType
Type ::= ReturnOrParamType | RecordType

ArrayType ::= 'array' '[' Range ']' 'of' Type
RecordType ::= 'record' (VarDecl)+ 'end'

TypedConstant ::= Expression | '(' (TypedConstant [','])+ ')'

// Declarations
ConstSection ::= 'const' (ConstDecl)+
ConstDecl ::= Identifier [':' Type] '=' TypedConstant ';'

VarSection: ::= 'var' (VarDecl)+
VarDecl ::= IdentList ':' Type [ '=' TypedConstant] ';'

TypeSection ::= 'type' (TypeDecl)+
TypeDecl ::= Identifier '=' Type ';'

Parameter ::= ['var' | 'const'] IdentList [':' ReturnOrParamType] ['=' Expression]
ParameterList ::= '(' (Parameter [';'])* ')'

ProcedureDecl ::= 'procedure' Identifier [ParameterList] ';' SubProgram
FunctionDecl ::= 'function' Identifier [ParameterList] ':' ReturnOrParamType ';' SubProgram

Declaration ::= ConstSection | VarSection | TypeSection | ProcedureDecl | FunctionDecl
DeclSection ::= (Declaration)*
